class WidgetData {
  final String title;
  final String desc;
  final String route;
  final String heroTag;

  WidgetData(this.title, this.desc, this.route, this.heroTag);

}

final widgetData = {
  'Accessibility': [
    WidgetData('ExcludeSemantics', 'A widget that drops all the semantics of its descendants.', '/  ExcludeSemantics', 'ExcludeSemantics'),
    WidgetData('MergeSemantics', 'A widget that merges the semantics of its descendants.', '/MergeSemantics', 'MergeSemantics'),
    WidgetData('Semantics', 'A widget that annotates the widget tree with a description of the meaning of the widgets.', '/Semantics', 'Semantics')
  ],
  'Animation and motion': [
    WidgetData('AnimatedBuilder', 'A general-purpose widget for building animations. ', '/AnimatedBuilder', 'AnimatedBuilder'),
    WidgetData('AnimatedContainer', 'A container that gradually changes its values over a period of time.', '/AnimatedContainer', 'AnimatedContainer'),
    WidgetData('AnimatedCrossFade', 'A widget that cross-fades between two given children and animates itself between their sizes.', '/AnimatedCrossFade', 'AnimatedCrossFade'),
    WidgetData('AnimatedDefaultTextStyle', 'Animated version of DefaultTextStyle which automatically transitions the default text style.', '/AnimatedDefaultTextStyle', 'AnimatedDefaultTextStyle'),
    WidgetData('AnimatedListState', 'The state for a scrolling container that animates items when they are inserted or removed.', '/AnimatedListState', 'AnimatedListState'),
    WidgetData('AnimatedModalBarrier', 'A widget that prevents the user from interacting with widgets behind itself.', '/AnimatedModalBarrier', 'AnimatedModalBarrier'),
    WidgetData('AnimatedOpacity', "Animated version of Opacity which automatically transitions the child's opacity over a given duration whenever the given opacity changes.", '/AnimatedOpacity', 'AnimatedOpacity'),
    WidgetData('AnimatedPhysicalModel', 'Animated version of PhysicalModel.', '/AnimatedPhysicalModel', 'AnimatedPhysicalModel'),
    WidgetData('AnimatedPositioned', "Animated version of Positioned which automatically transitions the child's position over a given duration whenever the given position changes.", '/AnimatedPositioned', 'AnimatedPositioned'),
    WidgetData('AnimatedSize', "Animated widget that automatically transitions its size over a given duration whenever the given child's size changes.", '/AnimatedSize', 'AnimatedSize'),
    WidgetData('AnimatedWidget', 'A widget that rebuilds when the given Listenable changes value.', '/AnimatedWidget', 'AnimatedWidget'),
    WidgetData('AnimatedWidgetBaseState', 'A base class for widgets with implicit animations.', '/AnimatedWidgetBaseState', 'AnimatedWidgetBaseState'),
    WidgetData('DecoratedBoxTransition', 'Animated version of a DecoratedBox that animates the different properties of its Decoration.', '/DecoratedBoxTransition', 'DecoratedBoxTransition'),
    WidgetData('FadeTransition', 'Animates the opacity of a widget.', '/FadeTransition', 'FadeTransition'),
    WidgetData('Hero', 'A widget that marks its child as being a candidate for hero animations.', '/Hero', 'Hero'),
    WidgetData('PositionedTransition', "Animated version of Positioned which takes a specific Animation to transition the child's position from a start position to and end position over the lifetime of the animation", '/PositionedTransition', 'PositionedTransition'),
    WidgetData('RotationTransition', 'Animates the rotation of a widget.', '/RotationTransition', 'RotationTransition'),
    WidgetData('ScaleTransition', 'Animates the scale of transformed widget.', '/ScaleTransition', 'ScaleTransition'),
    WidgetData('SizeTransition', 'Animates its own size and clips and aligns the child.', '/SizeTransition', 'SizeTransition'),
    WidgetData('SlideTransition', 'Animates the position of a widget relative to its normal position.', '/SlideTransition', 'SlideTransition'),
  ],
  'Assets, images, and icon': [
    WidgetData('AssetBundle', 'Asset bundles contain resources, such as images and strings, that can be used by an application.', '/AssetBundle', 'AssetBundle'),
    WidgetData('Icon', 'A Material Design icon.', '/Icon', 'Icon'),
    WidgetData('Image', 'A widget that displays an image.', '/Image', 'Image'),
    WidgetData('RawImage', 'A widget that displays a dart:ui.Image directly.', '/RawImage', 'RawImage')
  ],
  'Async': [
    WidgetData('FutureBuilder', 'Widget that builds itself based on the latest snapshot of interaction with a Future.', '/FutureBuilder', 'FutureBuilder',),
    WidgetData('StreamBuilder', 'Widget that builds itself based on the latest snapshot of interaction with a Stream.', '/StreamBuilder', 'StreamBuilder'),
  ],
  'Basics': [
    WidgetData('Appbar', 'A Material Design app bar. An app bar consists of a toolbar and potentially other widgets, such as a TabBar and a FlexibleSpaceBar.', '/Appbar', 'Appbar'),
    WidgetData('Column', 'Layout a list of child widgets in the vertical direction.', '/Column', 'Column'),
    WidgetData('Container', 'A convenience widget that combines common painting, positioning, and sizing widgets.', '/Container', 'Container'),
    WidgetData('FlutterLogo', 'The Flutter logo, in widget form. This widget respects the IconTheme.', '/FlutterLogo', 'FlutterLogo'),
    WidgetData('Icon', 'A Material Design icon.', '/Icon', 'Icon'),
    WidgetData('Image', 'A widget that displays an image.', '/Image', 'Image'),
    WidgetData('Placeholder', 'A widget that draws a box that represents where other widgets will one day be added.', '/Placeholder', 'Placeholder'),
    WidgetData('RaisedButton', 'A Material Design raised button. A raised button consists of a rectangular piece of material that hovers over the interface.', '/RaisedButton', 'RaisedButton'),
    WidgetData('Row', 'Layout a list of child widgets in the horizontal direction.', '/Row', 'Row'),
    WidgetData('Scaffold', 'Implements the basic Material Design visual layout structure. This class provides APIs for showing drawers, snack bars, and bottom sheets.', '/Scaffold', 'Scaffold'),
    WidgetData('Text', 'A run of text with a single style.', '/Text', 'Text'),
  ],
  'Input': [
    WidgetData('Form', 'An optional container for grouping together multiple form field widgets (e.g. TextField widgets).', '/Form', 'Form'),
    WidgetData('FormField', 'A single form field. This widget maintains the current state of the form field, so that updates and validation errors are visually reflected in the UI.', '/FormField', 'FormField'),
    WidgetData('RawKeyboardListener', 'A widget that calls a callback whenever the user presses or releases a key on a keyboard.', '/RawKeyboardListener', 'RawKeyboardListener'),
  ],
  'Interaction': [
    WidgetData('AbsorbPointer', 'A widget that absorbs pointers during hit testing.', '/AbsorbPointer', 'AbsorbPointer'),
    WidgetData('Dismissible', 'A widget that can be dismissed by dragging in the indicated direction.', '/Dismissible', 'Dismissible'),
    WidgetData('DragTarget', 'A widget that receives data when a Draggable widget is dropped.', '/DragTarget', 'DragTarget'),
    WidgetData('Draggable', 'A widget that can be dragged from to a DragTarget.', '/Draggable', 'Draggable'),
    WidgetData('GestureDetector', 'A widget that detects gestures.', '/GestureDetector', 'GestureDetector'),
    WidgetData('IgnorePointer', 'A widget that is invisible during hit testing.', '/IgnorePointer', 'IgnorePointer'),
    WidgetData('title', 'Makes its child draggable starting from long press.', '/route', 'heroTag'),
    WidgetData('Scrollable', 'Scrollable implements the interaction model for a scrollable widget, including gesture recognition.', '/Scrollable', 'Scrollable'),
    WidgetData('Hero', 'A widget that marks its child as being a candidate for hero animations.', '/Hero', 'Hero'),
    WidgetData('Navigator', 'A widget that manages a set of child widgets with a stack discipline.', '/Navigator', 'Navigator'),
  ],

  'Painting': [
    WidgetData('BackdropFilter', 'A widget that applies a filter to the existing painted content and then paints child. This effect is relatively expensive, especially if the filter is non-local, such as a blur.', '/BackdropFilter', 'BackdropFilter'),
    WidgetData('ClipOval', 'A widget that clips its child using an oval.', '/ClipOval', 'ClipOval'),
    WidgetData('ClipPath', 'A widget that clips its child using a path.', '/ClipPath', 'ClipPath'),
    WidgetData('ClipRect', 'A widget that clips its child using a rectangle.', '/ClipRect', 'ClipRect'),
    WidgetData('CustomPaint', 'A widget that provides a canvas on which to draw during the paint phase.', '/CustomPaint', 'CustomPaint'),
    WidgetData('DecoratedBox', 'A widget that paints a Decoration either before or after its child paints.', '/DecoratedBox', 'DecoratedBox'),
    WidgetData('FractionalTranslation', "A widget that applies a translation expressed as a fraction of the box's size before painting its child.", '/FractionalTranslation', 'FractionalTranslation'),
    WidgetData('Opacity', 'A widget that makes its child partially transparent.', '/Opacity', 'Opacity'),
    WidgetData('RotatedBox', 'A widget that rotates its child by a integral number of quarter turns.', '/RotatedBox', 'RotatedBox'),
    WidgetData('Transform', 'A widget that applies a transformation before painting its child.', '/Transform', 'Transform'),
  ],

  'Styling': [
    WidgetData('MediaQuery', 'Establishes a subtree in which media queries resolve to the given data.', '/MediaQuery', 'MediaQuery'),
    WidgetData('Padding', 'A widget that insets its child by the given padding.', '/Padding', 'Padding'),
    WidgetData('Theme', 'Applies a theme to descendant widgets. A theme describes the colors and typographic choices of an application.', '/Theme', 'Theme'),
  ],

  'Text': [
    WidgetData('DefaultTextStyle', 'The text style to apply to descendant Text widgets without explicit style.', '/DefaultTextStyle', 'DefaultTextStyle'),
    WidgetData('RichText', 'The RichText widget displays text that uses multiple different styles.', '/RichText', 'RichText'),
    WidgetData('Text', 'A run of text with a single style.', '/Text', 'Text'),
  ],

  'Scrolling': [
    WidgetData('CustomScrollView', 'A ScrollView that creates custom scroll effects using slivers.', '/CustomScrollView', 'CustomScrollView'),
    WidgetData('GridView', 'A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout. ', '/GridView', 'GridView'),
    WidgetData('ListView', 'A scrollable, linear list of widgets. ListView is the most commonly used scrolling widget.', '/ListView', 'ListView'),
    WidgetData('NestedScrollView', 'A scrolling view inside of which can be nested other scrolling views, with their scroll positions being intrinsically linked.', '/NestedScrollView', 'NestedScrollView'),
    WidgetData('NotificationListener', 'A widget that listens for Notifications bubbling up the tree.', '/NotificationListener', 'NotificationListener'),
    WidgetData('PageView', 'A scrollable list that works page by page.', '/PageView', 'PageView'),
    WidgetData('RefreshIndicator', 'A Material Design pull-to-refresh wrapper for scrollables.', '/RefreshIndicator', 'RefreshIndicator'),
    WidgetData('ScrollConfiguration', 'Controls how Scrollable widgets behave in a subtree.', '/ScrollConfiguration', 'ScrollConfiguration'),
    WidgetData('Scrollable', 'Scrollable implements the interaction model for a scrollable widget, including gesture recognition.', '/Scrollable', 'Scrollable'),
    WidgetData('Scrollbar', 'A Material Design scrollbar. A scrollbar indicates which portion of a Scrollable widget is actually visible.', '/Scrollbar', 'Scrollbar'),
    WidgetData('SingleChildScrollView', 'A box in which a single widget can be scrolled.', '/SingleChildScrollView', 'SingleChildScrollView'),
  ],

  'Cupertino': [
    WidgetData('CupertinoActionSheet', 'An iOS-style modal bottom action sheet to choose an option among many.', '/CupertinoActionSheet', 'CupertinoActionSheet'),
    WidgetData('CupertinoActivityIndicator', "An iOS-style activity indicator. Displays a circular 'spinner'.", '/CupertinoActivityIndicator', 'CupertinoActivityIndicator'),
    WidgetData('CupertinoAlertDialog', 'An iOS-style alert dialog.', '/CupertinoAlertDialog', 'CupertinoAlertDialog'),
    WidgetData('CupertinoButton', 'An iOS-style button.', '/CupertinoButton', 'CupertinoButton'),
    WidgetData('CupertinoContextMenu', 'An iOS-style full-screen modal route that opens when the child is long-pressed. Used to display relevant actions for your content.', '/CupertinoContextMenu', 'CupertinoContextMenu'),
    WidgetData('CupertinoDatePicker', 'An iOS-style date or date and time picker.', '/CupertinoDatePicker', 'CupertinoDatePicker'),
    WidgetData('CupertinoDialog', 'An iOS-style dialog.', '/CupertinoDialog', 'CupertinoDialog'),
    WidgetData('CupertinoDialogAction', 'A button typically used in a CupertinoAlertDialog.', '/CupertinoDialogAction', 'CupertinoDialogAction'),
    WidgetData('CupertinoFullscreenDialogTransition', 'An iOS-style transition used for summoning fullscreen dialogs.', '/CupertinoFullscreenDialogTransition', 'CupertinoFullscreenDialogTransition'),
    WidgetData('CupertinoNavigationBar', 'An iOS-style top navigation bar. Typically used with CupertinoPageScaffold.', '/CupertinoNavigationBar', 'CupertinoNavigationBar'),
    WidgetData('CupertinoPageScaffold', 'Basic iOS style page layout structure. Positions a navigation bar and content on a background.', '/CupertinoPageScaffold', 'CupertinoPageScaffold'),
    WidgetData('CupertinoPageTransition', 'Provides an iOS-style page transition animation.', '/CupertinoPageTransition', 'CupertinoPageTransition'),
    WidgetData('CupertinoPicker', 'An iOS-style picker control. Used to select an item in a short list.', '/CupertinoPicker', 'CupertinoPicker'),
    WidgetData('CupertinoPopupSurface', 'Rounded rectangle surface that looks like an iOS popup surface, such as an alert dialog or action sheet.', '/CupertinoPopupSurface', 'CupertinoPopupSurface'),
    WidgetData('CupertinoScrollbar', 'An iOS-style scrollbar that indicates which portion of a scrollable widget is currently visible.', '/CupertinoScrollbar', 'CupertinoScrollbar'),
    WidgetData('CupertinoSegmentedControl', 'An iOS-style segmented control. Used to select mutually exclusive options in a horizontal list.', '/CupertinoSegmentedControl', 'CupertinoSegmentedControl'),
    WidgetData('CupertinoSlider', 'Used to select from a range of values.', '/CupertinoSlider', 'CupertinoSlider'),
    WidgetData('CupertinoSlidingSegmentedControl', 'An iOS-13-style segmented control. Used to select mutually exclusive options in a horizontal list.', '/CupertinoSlidingSegmentedControl', 'CupertinoSlidingSegmentedControl'),
    WidgetData('CupertinoSwitch', 'An iOS-style switch. Used to toggle the on/off state of a single setting.', '/CupertinoSwitch', 'CupertinoSwitch'),
    WidgetData('CupertinoTabBar', 'An iOS-style bottom tab bar. Typically used with CupertinoTabScaffold.', '/CupertinoTabBar', 'CupertinoTabBar'),
    WidgetData('CupertinoTabScaffold', 'Tabbed iOS app structure. Positions a tab bar on top of tabs of content.', '/CupertinoTabScaffold', 'CupertinoTabScaffold'),
    WidgetData('CupertinoTabView', 'Root content of a tab that supports parallel navigation between tabs. Typically used with CupertinoTabScaffold.', '/CupertinoTabView', 'CupertinoTabView'),
    WidgetData('CupertinoTextField', 'An iOS-style text field.', '/CupertinoTextField', 'CupertinoTextField'),
    WidgetData('CupertinoTimerPicker', 'An iOS-style countdown timer picker.', '/CupertinoTimerPicker', 'CupertinoTimerPicker'),
  ],

  'Layout': [
    WidgetData('Align', "A widget that aligns its child within itself and optionally sizes itself based on the child's size.", '/Align', 'Align'),
    WidgetData('AspectRatio', 'A widget that attempts to size the child to a specific aspect ratio.', '/AspectRatio', 'AspectRatio'),
    WidgetData('Baseline', "A widget that positions its child according to the child's baseline", '/Baseline', 'Baseline'),
    WidgetData('Center', 'A widget that centers its child within itself.', '/Center', 'Center'),
    WidgetData('ConstrainedBox', 'A widget that imposes additional constraints on its child.', '/ConstrainedBox', 'ConstrainedBox'),
    WidgetData('Container', 'A convenience widget that combines common painting, positioning, and sizing widgets.', '/Container', 'Container'),
    WidgetData('CustomSingleChildLayout', 'A widget that defers the layout of its single child to a delegate.', '/CustomSingleChildLayout', 'CustomSingleChildLayout'),
    WidgetData('Expanded', 'A widget that expands a child of a Row, Column, or Flex.', '/Expanded', 'Expanded'),
    WidgetData('FittedBox', 'Scales and positions its child within itself according to fit.', '/FittedBox', 'FittedBox'),
    WidgetData('FractionallySizedBox', 'A widget that sizes its child to a fraction of the total available space.', '/FractionallySizedBox', 'FractionallySizedBox'),
    WidgetData('IntrinsicHeight', "A widget that sizes its child to the child's intrinsic height.", '/IntrinsicHeight', 'IntrinsicHeight'),
    WidgetData('IntrinsicWidth', "A widget that sizes its child to the child's intrinsic width.", '/IntrinsicWidth', 'IntrinsicWidth'),
    WidgetData('LimitedBox', "A box that limits its size only when it's unconstrained.", '/LimitedBox', 'LimitedBox'),
    WidgetData('Offstage', 'A widget that lays the child out as if it was in the tree, but without painting anything, without making the child available for hit testing, and without taking any room in the parent.', '/Offstage', 'Offstage'),
    WidgetData('OverflowBox', 'A widget that imposes different constraints on its child than it gets from its parent, possibly allowing the child to overflow the parent.', '/OverflowBox', 'OverflowBox'),
    WidgetData('Padding', 'A widget that insets its child by the given padding.', '/Padding', 'Padding'),
    WidgetData('SizedBox', 'A box with a specified size.', '/SizedBox', 'SizedBox'),
    WidgetData('SizedOverflowBox', 'A widget that is a specific size but passes its original constraints through to its child, which will probably overflow.', '/SizedOverflowBox', 'SizedOverflowBox'),
    WidgetData('Transform', 'A widget that applies a transformation before painting its child.', '/Transform', 'Transform'),
    WidgetData('Column', 'Layout a list of child widgets in the vertical direction.', '/Column', 'Column'),
    WidgetData('CustomMultiChildLayout', 'A widget that uses a delegate to size and position multiple children.', '/CustomMultiChildLayout', 'CustomMultiChildLayout'),
    WidgetData('Flow', 'A widget that implements the flow layout algorithm.', '/Flow', 'Flow'),
    WidgetData('GridView', 'A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout. ', '/GridView', 'GridView'),
    WidgetData('IndexedStack', 'A Stack that shows a single child from a list of children.', '/IndexedStack', 'IndexedStack'),
    WidgetData('LayoutBuilder', "Builds a widget tree that can depend on the parent widget's size.", '/LayoutBuilder', 'LayoutBuilder'),
    WidgetData('ListBody', 'A widget that arranges its children sequentially along a given axis, forcing them to the dimension of the parent in the other axis.', '/ListBody', 'ListBody'),
    WidgetData('ListView', 'A scrollable, linear list of widgets.', '/ListView', 'ListView'),
    WidgetData('Row', 'Layout a list of child widgets in the horizontal direction', '/Row', 'Row'),
    WidgetData('Stack', 'This class is useful if you want to overlap several children in a simple way.', '/Stack', 'Stack'),
    WidgetData('Table', 'A widget that uses the table layout algorithm for its children.', '/Table', 'Table'),
    WidgetData('Wrap', 'A widget that displays its children in multiple horizontal or vertical runs.', '/Wrap', 'Wrap'),
  ],

  'Material': [
    WidgetData('Appbar', 'A Material Design app bar. An app bar consists of a toolbar and potentially other widgets, such as a TabBar and a FlexibleSpaceBar.', '/Appbar', 'Appbar'),
    WidgetData('BottomNavigationBar', 'Bottom navigation bars make it easy to explore and switch between top-level views in a single tap.', '/BottomNavigationBar', 'BottomNavigationBar'),
    WidgetData('Drawer', 'A Material Design panel that slides in horizontally from the edge of a Scaffold to show navigation links in an application.', '/Drawer', 'Drawer'),
    WidgetData('MaterialApp', 'A convenience widget that wraps a number of widgets that are commonly required for applications implementing Material Design.', '/MaterialApp', 'MaterialApp'),
    WidgetData('Scaffold', 'Implements the basic Material Design visual layout structure.', '/Scaffold', 'Scaffold'),
    WidgetData('SliverAppBar', 'A material design app bar that integrates with a CustomScrollView.', '/SliverAppBar', 'SliverAppBar'),
    WidgetData('TabBar', 'A Material Design widget that displays a horizontal row of tabs.', '/TabBar', 'TabBar'),
    WidgetData('TabBarView', 'A page view that displays the widget which corresponds to the currently selected tab. Typically used in conjunction with a TabBar.', '/TabBarView', 'TabBarView'),
    WidgetData('WidgetsApp', 'A convenience class that wraps a number of widgets that are commonly required for an application.', '/WidgetsApp', 'WidgetsApp'),
    WidgetData('ButtonBar', 'A horizontal arrangement of buttons.', '/ButtonBar', 'ButtonBar'),
    WidgetData('DropdownButton', 'Shows the currently selected item and an arrow that opens a menu for selecting another item.', '/DropdownButton', 'DropdownButton'),
    WidgetData('FlatButton', 'A flat button is a section printed on a Material Components widget that reacts to touches by filling with color.', '/FlatButton', 'FlatButton'),
    WidgetData('FloatingActionButton', 'A floating action button is a circular icon button that hovers over content to promote a primary action in the application.', '/FloatingActionButton', 'FloatingActionButton'),
    WidgetData('IconButton', 'An icon button is a picture printed on a Material widget that reacts to touches by filling with color (ink).', '/IconButton', 'IconButton'),
    WidgetData('OutlineButton', 'A medium-emphasis button for secondary actions that are important but are not the primary action in an app.', '/OutlineButton', 'OutlineButton'),
    WidgetData('PopupMenuButton', 'Displays a menu when pressed and calls onSelected when the menu is dismissed because an item was selected.', '/PopupMenuButton', 'PopupMenuButton'),
    WidgetData('RaisedButton', 'A Material Design raised button. A raised button consists of a rectangular piece of material that hovers over the interface.', '/RaisedButton', 'RaisedButton'),
    WidgetData('Checkbox', 'Checkboxes allow the user to select multiple options from a set. The Checkbox widget implements this component.', '/Checkbox', 'Checkbox'),
    WidgetData('Date & Time Pickers', 'Date pickers use a dialog window to select a single date on mobile.', '/Date & Time Pickers', 'Date & Time Pickers'),
    WidgetData('Radio', 'Radio buttons allow the user to select one option from a set.', '/Radio', 'Radio'),
    WidgetData('Slider', 'Sliders let users select from a range of values by moving the slider thumb. ', '/Slider', 'Slider'),
    WidgetData('Switch', 'On/off switches toggle the state of a single settings option.', '/Switch', 'Switch'),
    WidgetData('TextField', 'Touching a text field places the cursor and displays the keyboard. The TextField widget implements this component.', '/TextField', 'TextField'),
    WidgetData('AlertDialog', 'Alerts are urgent interruptions requiring acknowledgement that inform the user about a situation. The AlertDialog widget implements this component.', '/AlertDialog', 'AlertDialog'),
    WidgetData('BottomSheet', '/Bottom sheets slide up from the bottom of the screen to reveal more content.', '/BottomSheet', 'BottomSheet'),
    WidgetData('ExpansionPanel', 'Expansion panels contain creation flows and allow lightweight editing of an element. The ExpansionPanel widget implements this component.', '/ExpansionPanel', 'ExpansionPanel'),
    WidgetData('SimpleDialog', 'Simple dialogs can provide additional details or actions about a list item', '/SimpleDialog', 'SimpleDialog'),
    WidgetData('SnackBar', 'A lightweight message with an optional action which briefly displays at the bottom of the screen.', '/SnackBar', 'SnackBar'),
    WidgetData('Card', 'A Material Design card. A card has slightly rounded corners and a shadow.', '/Card', 'Card'),
    WidgetData('Chip', 'A Material Design chip. Chips represent complex entities in small blocks, such as a contact.', '/Chip', 'Chip'),
    WidgetData('CircularProgressIndicator', 'A material design circular progress indicator, which spins to indicate that the application is busy.', '/CircularProgressIndicator', 'CircularProgressIndicator'),
    WidgetData('DataTable', 'Data tables display sets of raw data. They usually appear in desktop enterprise products.', '/DataTable', 'DataTable'),
    WidgetData('GridView', 'A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout. The GridView widget implements this component.', '/GridView', 'GridView'),
    WidgetData('Icon', 'A Material Design icon.', '/Icon', 'Icon'),
    WidgetData('Image', 'A widget that displays an image.', '/Image', 'Image'),
    WidgetData('LinearProgressIndicator', 'A material design linear progress indicator, also known as a progress bar.', '/LinearProgressIndicator', 'LinearProgressIndicator'),
    WidgetData('Tooltip', 'Tooltips provide text labels that help explain the function of a button or other user interface action', '/Tooltip', 'Tooltip'),
    WidgetData('Divider', 'A one logical pixel thick horizontal line, with padding on either side.', '/Divider', 'Divider'),
    WidgetData('ListTile', 'A single fixed-height row that typically contains some text as well as a leading or trailing icon.', '/ListTile', 'ListTile'),
    WidgetData('Stepper', 'A Material Design stepper widget that displays progress through a sequence of steps.', '/Stepper', 'Stepper'),
  ]
};